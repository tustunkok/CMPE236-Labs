START_POS_LOC	EQU	40H
END_POS_LOC	EQU	41H
VRAM_SIZE	EQU	08D
START_ADDR	EQU	30H
END_ADDR	EQU	37H

		ORG	00H
		SJMP	MAIN

		ORG	30H
MAIN:		MOV	START_POS_LOC, #START_ADDR
		MOV	END_POS_LOC, #END_ADDR
		ACALL	SCAN_ROW
HALT:		SJMP	MAIN
;===========================================================================
SCAN_ROW:	ACALL	GENERATE_SHAPE

		MOV	R0, START_POS_LOC		; R0 -> VRAM POINTER
		MOV	P0, #00H
		MOV	P1, #00H
		MOV	A, #00000001B
		MOV	R2, #VRAM_SIZE			; R7 CHANGED TO R2

SCNLP:		MOV	P0, #00H
		MOV	P1, @R0
		MOV	P0, A
		RL	A
		INC	R0
		PUSH	A
		PUSH	02H
		PUSH	00H
		POP	02H
		ACALL	CHCK_LIMIT
		MOV	R0, A
		POP	02H
		POP	A
		DJNZ	R2, SCNLP			; R7 CHANGED TO R2

		PUSH	A
		ACALL	DOWN_1
		POP	A

		MOV	R2, #VRAM_SIZE			; R7 CHANGED TO R2
		SJMP	SCNLP
		RET

;===========================================================================
CHCK_LIMIT:	MOV	A, R2
		CLR	C
		SUBB	A, #START_ADDR
		MOV	B, #VRAM_SIZE
		DIV	AB
		MOV	A, #START_ADDR
		ADD	A, B
		RET
;===========================================================================
DOWN_1:		DEC	START_POS_LOC
		MOV	R2, START_POS_LOC
		ACALL	CHCK_LIMIT
		MOV	START_POS_LOC, A

PR_END:		DEC	END_POS_LOC
		MOV	R2, END_POS_LOC
		ACALL	CHCK_LIMIT
		MOV	END_POS_LOC, A

EXIT_DOWN:	MOV	R0, START_POS_LOC
		RET
;===========================================================================
GENERATE_SHAPE:	MOV	30H, #00001000B
		MOV	31H, #00011100B
		MOV	32H, #00000000B
		MOV	33H, #00000000B
		MOV	34H, #00000000B
		MOV	35H, #00000000B
		MOV	36H, #00000000B
		MOV	37H, #00000000B

		;MOV	30H,	#00001000B
		;MOV	31H,	#00001100B
		;MOV	32H,	#00001000B
		;MOV	33H,	#00000000B
		;MOV	34H,	#00000000B
		;MOV	35H,	#00000000B
		;MOV	36H,	#00000000B
		;MOV	37H,	#00000000B
		RET
		END
