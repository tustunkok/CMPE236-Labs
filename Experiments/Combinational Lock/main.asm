; LED DISPLAY CONSTANTS
N0		EQU	11000000B	; #DEFINE N0 11000000B
N1		EQU	11111001B
N2		EQU	10100100B
N3		EQU	10110000B
N4		EQU	10011001B
N5		EQU	10010010B
N6		EQU	10000010B
N7		EQU	11111000B
N8		EQU	10000000B
N9		EQU	10010000B
NA		EQU	10001000B
NB		EQU	10000011B
NC		EQU	11000110B
ND		EQU	10100001B
NE_		EQU	10000110B
NF		EQU	10001110B

; CONSTANTS
ATTEMPTS_LOC	EQU	20H
PASSWD_LOC	EQU	21H
EN		EQU	P3.0

		ORG	00H
		SJMP	MAIN

		ORG	30H
MAIN:		MOV	ATTEMPTS_LOC, #03D

		MOV	R2, ATTEMPTS_LOC
		ACALL	WRT2LED			; WRT2LED(ATTEMPTS_LOC);

		ACALL	GETPASSWD		; GETPASSWD();

		ACALL	CHKPASSWD
		CJNE	A, #04D, ERROR
		MOV	R2, #0CH
		ACALL	WRT2LED
		SJMP	HALT
ERROR:		MOV	R2, #0FH
		ACALL	WRT2LED
HALT:		SJMP	HALT

; ===================================================
; CHECK PASSWORD ENTERED BY THE USER
; PARAMS: NONE
; RETURN: NUMBER OF CORRECTLY ENTERED DIGITS
CHKPASSWD:	MOV	R2, #04D		; I = 4
		MOV	R0, #PASSWD_LOC		; CHAR *PWD = PASSDW_LOC;
		CLR	A
		PUSH	A			; INT RESULT = 0;

LP2:		PUSH	02H
		MOV	R2, ATTEMPTS_LOC
		ACALL	WRT2LED
		POP	02H			; WRT2LED(ATTEMPT_LOC)

		JB	EN, LP2			; WHILE (EN);
		MOV	A, P2
		CLR	C
		SUBB	A, @R0
		JZ	CNT1
		DJNZ	ATTEMPTS_LOC, LP2
		MOV	R2, ATTEMPTS_LOC
		ACALL	WRT2LED
		SJMP	EXT1
CNT1:		INC	R0
		POP	A
		INC	A
		PUSH	A
		DJNZ	R2, LP2
EXT1:		POP	A
		RET

; ===================================================
; GET PASSWORD FROM THE USER
; PARAMS: NONE
; RETURN: NONE
GETPASSWD:	MOV	R2, #04D		; I = 4
		MOV	R0, #PASSWD_LOC		; CHAR *PWD = PASSWD_LOC;
LP1:		JB	EN, LP1			; WHILE (EN);
		MOV	@R0, P2			; *PWD = P2
		INC	R0			; PWD++;
		DJNZ	R2, LP1			; IF (I > 0) I--; GOTO LP1;
		RET

; ===================================================
; WRITE TO DISPLAY
; PARAMS: NUMBER TO BE DISPLAYED
; RETURN: NONE
WRT2LED:	MOV	DPTR, #LED_DATA
		MOV	A, #10H			; A = 16
		CLR	C			; R2 = 17
		SUBB	A, R2			; A = A - R2 => -1
		JC	EXT			; TRY(R2 < 16)
		MOV	A, R2			; ...
		MOVC	A, @A+DPTR
		MOV	P1, A			; FINALLY
EXT:		RET
		ORG	0200H
LED_DATA:	DB	N0, N1, N2, N3, N4, N5, N6, N7, N8, N9, NA, NB,NC, ND, NE_, NF
		END
